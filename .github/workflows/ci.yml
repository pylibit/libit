name: libit Package CI/CD

on:
  push:
    tags:
      - "v*.*.*"
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install setuptools wheel
        pip install -e .
        
    - name: Install test dependencies
      run: |
        pip install pytest pytest-cov pytest-xdist flake8 black mypy
        
    - name: Type checking with mypy
      run: |
        mypy libit --ignore-missing-imports --no-strict-optional
      continue-on-error: true
        
    - name: Code formatting check with black
      run: |
        black --check --diff .
      continue-on-error: true
        
    - name: Lint with flake8
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Security check with bandit
      run: |
        pip install bandit
        bandit -r libit/ -f json -o bandit-report.json || true
        bandit -r libit/ || true
      continue-on-error: true

    - name: Run comprehensive tests
      run: |
        python -m pytest tests.py tests_enhanced.py -v --cov=libit --cov-report=xml --cov-report=html
      continue-on-error: true
      
    - name: Test basic functionality
      run: |
        python -c "import libit; print('‚úÖ Import successful')"
        python -c "from libit import gen_key, btc_wallet, multi_wallet; key = gen_key(); wallet = btc_wallet(key); print('‚úÖ Multi-crypto functions work')"
        python -c "from libit import privatekey_addr; addr = privatekey_addr('a1b2c3d4e5f6a1b2c3d4e5f6a1b2c3d4e5f6a1b2c3d4e5f6a1b2c3d4e5f6a1b2'); print('‚úÖ Legacy functions work')"
        python -c "from libit import check_addr, is_valid, valid; result = check_addr('1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa'); print('‚úÖ Validation works')"
        python -c "from libit import btc, ltc, doge; w1=btc(); w2=ltc(); w3=doge(); print('‚úÖ Short names work')"

    - name: Test multi-crypto features
      run: |
        python -c "
        from libit import multi_wallet, gen_key, zcash_wallet, vtc_wallet
        key = gen_key()
        multi = multi_wallet(key)
        btc_info = multi.btc()
        print(f'BTC Legacy: {btc_info.addresses.legacy}')
        print(f'BTC Script: {btc_info.addresses.script}')
        zcash_info = zcash_wallet(key)
        vtc_info = vtc_wallet(key)
        print('‚úÖ All cryptocurrencies supported')
        "

    - name: Test validation features
      run: |
        python -c "
        from libit import check_addr, Validator, valid, coin_type
        btc_result = check_addr('1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa', 'btc')
        auto_result = check_addr('1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa')
        quick_check = valid('1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa')
        coin = coin_type('1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa')
        print('‚úÖ Enhanced validation works')
        "

    - name: Test examples
      run: |
        python examples_enhanced.py
      continue-on-error: true
      
    - name: Upload coverage reports
      uses: actions/upload-artifact@v4
      with:
        name: coverage-reports-${{ matrix.python-version }}
        path: |
          coverage.xml
          htmlcov/
      if: always()

  build:
    needs: test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'
      
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: Build package
      run: |
        python -m build
        ls -la dist/

    - name: Check package integrity
      run: |
        python setup.py check --strict
        twine check dist/*
        
    - name: Test package installation
      run: |
        pip install dist/*.whl
        python -c "import libit; print('‚úÖ Package installs correctly')"
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist
        path: dist/

  security:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'
        
    - name: Install security tools
      run: |
        pip install safety bandit semgrep
        
    - name: Check dependencies for vulnerabilities
      run: |
        safety check --json --output safety-report.json || true
        safety check || true
      continue-on-error: true
        
    - name: Static security analysis
      run: |
        bandit -r libit/ -f json -o bandit-report.json || true
        bandit -r libit/ || true
      continue-on-error: true
        
    - name: Upload security reports
      uses: actions/upload-artifact@v4
      with:
        name: security-reports
        path: |
          safety-report.json
          bandit-report.json
      if: always()

  publish:
    needs: [test, build, security]
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist
        path: dist/

    - name: Publish to PyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: |
        pip install twine
        twine upload dist/*
        
    - name: Create GitHub Release
      if: success()
      uses: softprops/action-gh-release@v2
      with:
        tag_name: "v5.2.0"
        name: "libit v5.2.0 - Enhanced Multi-Cryptocurrency Support"
        body: |
          ## üöÄ libit v5.2.0 - Major Enhancement Release

          ### ‚ú® New Features
          - **Multi-Cryptocurrency Support**: Bitcoin, Litecoin, Dogecoin, Bitcoin Cash, Dash, Ethereum, Tron
          - **Shorter Function Names**: More intuitive and concise API
          - **Enhanced Validation**: Comprehensive address validation for all supported coins
          - **DataClass Integration**: Professional structure with better error handling
          - **Improved CI/CD**: Enhanced testing and automated quality checks

          ### üîß Installation
          
          ```bash
          pip install libit --upgrade
          ```

          ### üí° Quick Usage
          
          ```python
          from libit import gen_key, multi_wallet, btc_wallet, check_addr
          
          # Generate multi-crypto wallet
          key = gen_key()
          wallet = multi_wallet(key)
          
          # Get Bitcoin addresses
          btc = wallet.btc()
          print(btc.addresses.legacy)  # Legacy address
          print(btc.addresses.script)  # Script address
          
          # Individual coin wallets
          ltc = ltc_wallet(key)
          doge = doge_wallet(key)
          
          # Validate addresses
          result = check_addr("1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa")
          print(result.valid, result.coin)
          ```

          ### üîó Links
          - [üìö Documentation](https://pylibit.github.io/libit/)
          - [üêç PyPI Package](https://pypi.org/project/libit/)
          - [üîß Source Code](https://github.com/pylibit/libit)
          
          ### üè∑Ô∏è Supported Cryptocurrencies
          - Bitcoin (BTC) - Legacy, Script, SegWit
          - Litecoin (LTC) - Legacy, Script, SegWit
          - Dogecoin (DOGE) - Legacy, Script
          - Bitcoin Cash (BCH) - Legacy, Script
          - Dash (DASH) - Legacy, Script
          - Ethereum (ETH)
          - Tron (TRX)
          
          **Full backward compatibility maintained** ‚úÖ
          
        files: |
          dist/*.tar.gz
          dist/*.whl
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
